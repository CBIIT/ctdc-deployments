@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			//label 'ctdc-docker'
			label 'slave-ncias-d2947-c'
		}
	}

	parameters {

        string(
	        defaultValue: '',
		    description: 'The image tag to deploy',
		    name: 'ImageTag')

		extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT      = 'ctdc'
	  SLACK_SECRET = "ctdc_slack_url"
	  ENV          = "${params.Environment}"

  }

  stages{
  	stage('checkout'){
  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "playbooks"]],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/ctdc-deployments']]])

        checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/ctdc-deployments']]])

        }

  	}

  	stage('Deploy'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible_4.0'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

	    environment {
            FE_VERSION = "${params.ImageTag}"
            BE_VERSION = getVersion(service: "backend",deploymentFile: "${PROJECT}-deployments/deployments.yaml")
        }

 		steps {

			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                ansiblePlaybook(
					playbook: "${WORKSPACE}/playbooks/ansible/playbooks/deploy-frontend-microservice.yml", 
            		inventory: "${WORKSPACE}/playbooks/ansible/playbooks/hosts",
                    extraVars: [
                        tier: "${params.Environment}",
						project_name: "${PROJECT}",
						iam_prefix: "power-user",
						subdomain: "trialcommons",
						domain_name: "cancer.gov",
						auth_enabled: false
						],
                    colorized: true)
 			}

 		}

  	}

	stage('Add Production Tag'){

 		when {

	        expression { 

                ENV == 'prod'

            }

        }

		steps {

 			script {

			    sh label: 'Docker-Tag', script: '''#!/bin/bash

				# Tag image as production if deploying to prod tier
				echo "Tagging Image as Production: $ECR_REPO:$IMAGE_TAG"
				aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				repo_url="$aws_account.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO"

				# login and get manifest
				docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $repo_url
				MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPO --image-ids imageTag=$IMAGE_TAG --output json | jq --raw-output --join-output '.images[0].imageManifest')

                # tag as latest and push to ECR
				aws ecr put-image --repository-name $ECR_REPO --image-tag production-$IMAGE_TAG --image-manifest "$MANIFEST"

				'''

			}

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}