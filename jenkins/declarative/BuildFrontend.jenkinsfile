@Library('datacommons-jenkins-shared-library@v1.0') _

pipeline {
	agent {
		node {
			label 'ctdc-docker'
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

        gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'main',
            name: 'FrontendBranch',
            type: 'GitParameterDefinition',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/bento-ctdc-frontend')

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT    = 'ctdc'
      FE_VERSION = "${params.FrontendBranch}-${BUILD_NUMBER}"

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
			branches: [[name: "${params.FrontendBranch}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-frontend"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/bento-ctdc-frontend']]])

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "playbooks"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/ctdc-deployments']]])

  		checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/ctdc-deployments']]])

        }

  	}

//  	stage('Build'){
//
// 		steps {
// 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
//                ansiblePlaybook(
//					playbook: "${WORKSPACE}/playbooks/ansible/playbooks/build-frontend-microservice.yml", 
//            		inventory: "${WORKSPACE}/playbooks/ansible/playbooks/hosts",
//                    extraVars: [
//						project_name: "${PROJECT}",
//						auth_enabled: false
//						],
//                   colorized: true)
// 			}
// 		}
//		
//  	}
	
  	stage('Update Deployment Manifest'){

 		steps {
 			
			script {
                if (params.UpdateDeploymentVersion) {
                    writeDeployment(
                        version: "${env.FE_VERSION}",
                        image:  "${env.FE_VERSION}",
                        service: "frontend",
                        deploymentFile: "${PROJECT}-deployments/deployment.yaml",
                        deploymentRepoUrl: "github.com/CBIIT/${PROJECT}-deployments",
                        deploymentCheckoutDirectory: "${PROJECT}-deployments"
                    )
                }
            }

 		}

  	}

  	stage('Update Code Tag'){

 		steps {
 			
			script {

                tagRepo ( 
                    gitTag: "${params.FrontendBranch}",
                    gitUrl: "github.com/CBIIT/bento-ctdc-frontend",
                    checkoutDirectory: "${env.PROJECT}-frontend"
                )

            }

 		}

  	}

  }

  post {

//    success {
//
//		script {
//			if (params.RunDeployStage) {
//				echo 'Run the deployment for this sevice'
//				build job: 'Bento/_Data_Processing/BentoDataLoader_ES', parameters: [gitParameter(name: 'Dataloader_Branch', value: 'master'), gitParameter(name: 'Frontend_Branch', value: "${params.Frontend_Tag}"), gitParameter(name: 'Backend_Branch', value: "${params.Backend_Tag}"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
//			}
//		}
//    }

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "ctdc_slack_url"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}