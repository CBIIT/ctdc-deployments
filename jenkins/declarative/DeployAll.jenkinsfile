@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label 'ctdc-docker'
		}
	}

	parameters {

		extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

  }

  options {

	timestamps()

  }

  environment {

      PROJECT    = 'ctdc'
	  JOB_PATH   = '_default/_lower/CTDC/_jobs'

  }

  stages{
  	stage('checkout'){
  		steps {

        checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/ctdc-deployments']]])

        }

  	}

  	stage('Deploy'){

 		steps {

            script {

                def deployment = readYaml file: "${WORKSPACE}/${PROJECT}-deployments/deployments.yaml"
                deployment.services.each {
                    buildJob(
                        jobName: "${JOB_PATH}/Deploy" + "${it.key}".capitalize(),
                        parameters:[
                                string(name: 'Environment', value: params["Environment"]),
                                string(name: "${it.key}".capitalize() + "_Tag" , value: it.value.image)
                        ]
                    )
                }
		    }

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "ctdc_slack_url"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}