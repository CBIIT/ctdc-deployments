@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label 'slave-ncias-d2957-c'
		}
	}
	parameters {

		extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa' )

		gitParameter(branchFilter: 'origin/(.*)', 
			defaultValue: 'master',
			name: 'Dataloader_Branch', 
			type: 'PT_BRANCH_TAG',
			quickFilterEnabled: false, 
			selectedValue: 'DEFAULT', 
			sortMode: 'ASCENDING_SMART', 
			tagFilter: '*', 
			useRepository: 'https://github.com/CBIIT/crdc-ctdc-dataloader')

		gitParameter(branchFilter: 'origin/(.*)', 
			defaultValue: 'master', 
			name: 'Backend_Branch', 
			type: 'PT_BRANCH_TAG',
			quickFilterEnabled: false, 
			selectedValue: 'DEFAULT', 
			sortMode: 'ASCENDING_SMART', 
			tagFilter: '*', 
			useRepository: 'https://github.com/CBIIT/bento-backend')

		gitParameter(branchFilter: 'origin/(.*)', 
			defaultValue: 'main',
			name: 'Frontend_Branch', 
			type: 'PT_BRANCH_TAG',
			quickFilterEnabled: false, 
			selectedValue: 'DEFAULT', 
			sortMode: 'ASCENDING_SMART', 
			tagFilter: '*', 
			useRepository: 'https://github.com/CBIIT/bento-ctdc-frontend')

		gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'master',
            name: 'Model_Branch',
            type: 'PT_BRANCH_TAG',
            quickFilterEnabled: false,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/ctdc-model')

    }

  options {
  	  ansiColor('xterm')
	  timestamps()
  }

  environment {

	  SLACK_SECRET = "ctdc_slack_url"

  }

    stages {
  	  stage('checkout'){
  		steps {
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.Dataloader_Branch}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
                recursiveSubmodules: true,
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/crdc-ctdc-dataloader']]])

			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Frontend_Branch}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'ctdc-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-ctdc-frontend']]])
			
			checkout([$class: 'GitSCM',
				branches: [[name: "${params.Backend_Branch}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'bento-backend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-backend']]])
            
			dir('ctdc-model'){
                git branch: "${params.Model_Branch}",
                url: 'https://github.com/CBIIT/ctdc-model'}
			
			sh 'git submodule update --init'
  			
			checkout([$class: 'GitSCM',
				branches: [[name: "main"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'ctdc-deployments']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/ctdc-deployments']]])

  		}
  	  }
	
  	stage('load-es-data'){
 		environment {
		    TIER = "${params.Environment}"
			PROJECT_NAME = "ctdc"
 		}
 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
			ansiblePlaybook( 
            	playbook: '${WORKSPACE}/ctdc-deployments/ansible/playbooks/dataloader/ctdc-opensearch-loader.yml',
				inventory: '${WORKSPACE}/ctdc-deployments/ansible/playbooks/hosts',
            	colorized: true) 
 			}
 		}
    }
	
 }
 
  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

	cleanup {

        cleanWs()
    
	}

  }
  
}